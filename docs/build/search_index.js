var documenterSearchIndex = {"docs":
[{"location":"","page":"-","title":"-","text":"As a general scenario, we consider a Lindblad master equations denoted by,","category":"page"},{"location":"","page":"-","title":"-","text":"mathcalLrho =fracd rhodt = -iH rho + sum_k=1^r L_k rho L_k^dagger -frac12leftL^dagger_k L_k rho right","category":"page"},{"location":"","page":"-","title":"-","text":"From the above equation we introduce pleq r counting fields with weights nu_k. This defines the generalized master equation (GME),","category":"page"},{"location":"","page":"-","title":"-","text":"mathcalL_chi rho_chi = left(mathcalL + Delta mathcalL_chi right)rho_chi","category":"page"},{"location":"","page":"-","title":"-","text":"where,","category":"page"},{"location":"","page":"-","title":"-","text":"Delta mathcalL_chi = sum_k=1^p(1-e^inu_k chi) L_k rho L_k^dagger ","category":"page"},{"location":"","page":"-","title":"-","text":"Whatever method we use to compute the FCS, we start by vectorizating the GME,","category":"page"},{"location":"","page":"-","title":"-","text":"mathcalL_chirho_chi to   mathcalL_chirho_chi rangle rangle","category":"page"},{"location":"","page":"-","title":"-","text":"fcscumulants_recursive","category":"page"},{"location":"#QuantumFCS.fcscumulants_recursive","page":"-","title":"QuantumFCS.fcscumulants_recursive","text":"fcscumulants_recursive(H, J, mJ, nCum; <keyword arguments>)\n\nCalculate n-th zero-frequency cumulant of full counting statistics using a recursive scheme.\n\nArguments\n\nH: Arbitrary operator specifying the Hamiltonian.\nJ: Vector containing all jump operators which can be of any arbitrary       operator type.\nmJ: Vector containing the monitored jumps\ntol=1e-3: Tracedistance used as termination criterion.\nhmin=1e-7: Minimal time step used in the time evolution.\nrates=ones(N): Vector or matrix specifying the coefficients for the       jump operators.\nJdagger=dagger.(Jdagger): Vector containing the hermitian conjugates of the       jump operators. If they are not given they are calculated automatically.\nnu: vector of length 2*length(J) weights for each jump operator. By default down jumps, J, have weight -1 and up-jumps have weight +1.\nkwargs...: Further arguments are passed on to the ode solver.\n\n\n\n\n\n","category":"function"}]
}
